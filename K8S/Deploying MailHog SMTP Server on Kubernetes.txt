Deploying MailHog SMTP server within a Kubernetes environment and using it with your application involves deploying MailHog and configuring your applications to use it for sending emails. Here's a step-by-step guide to get you started:
Step 1: Create a Kubernetes Deployment for MailHog

    Create a deployment YAML file for MailHog. Here’s a sample mailhog-deployment.yaml file:


apiVersion: apps/v1
kind: Deployment
metadata:
  name: mailhog
  labels:
    app: mailhog
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mailhog
  template:
    metadata:
      labels:
        app: mailhog
    spec:
      containers:
      - name: mailhog
        image: mailhog/mailhog:latest
        ports:
        - containerPort: 1025  # SMTP port
        - containerPort: 8025  # Web UI port

Apply the deployment:


    kubectl apply -f mailhog-deployment.yaml

Step 2: Create a Service for MailHog

    Create a service YAML file for MailHog. Here’s a sample mailhog-service.yaml file:


apiVersion: v1
kind: Service
metadata:
  name: mailhog
  labels:
    app: mailhog
spec:
  ports:
  - port: 1025
    targetPort: 1025
    name: smtp
  - port: 8025
    targetPort: 8025
    name: web
  selector:
    app: mailhog

Apply the service:


    kubectl apply -f mailhog-service.yaml

Step 3: Access MailHog

    SMTP Access: Your applications within the same Kubernetes cluster can use mailhog as the SMTP server hostname and 1025 as the port.

    Web UI Access: To access the MailHog web UI from outside the cluster, you may need to set up a port-forward or use a LoadBalancer service.

Port-forward:


kubectl port-forward service/mailhog 8025:8025

Access the web UI by navigating to http://localhost:8025 in your web browser.

LoadBalancer service (optional, if you need external access):


apiVersion: v1
kind: Service
metadata:
  name: mailhog-lb
  labels:
    app: mailhog
spec:
  type: LoadBalancer
  ports:
  - port: 8025
    targetPort: 8025
    name: web
  selector:
    app: mailhog

Apply the LoadBalancer service:


        kubectl apply -f mailhog-lb.yaml

        The external IP will be assigned by your cloud provider, and you can access the MailHog web UI using that IP.

Step 4: Configure Your Application

#Shortest Way:

    SMTP Configuration: Update your application’s SMTP configuration to use the MailHog service. For example:
        SMTP Host: mailhog
        SMTP Port: 1025
        Username/Password: Leave blank unless you have configured authentication.
        
        
#Details Way:

You need to configure your application to send emails to the MailHog SMTP server. This typically involves setting the SMTP server settings in your application's configuration file.

#For example, if you are using a PHP application with PHPMailer, your configuration might look like this:

#php

$mail = new PHPMailer();
$mail->isSMTP();
$mail->Host = 'localhost';
$mail->Port = 1025; // MailHog SMTP port
$mail->SMTPAuth = false;
$mail->setFrom('from@example.com', 'Mailer');
$mail->addAddress('recipient@example.com', 'Recipient');
$mail->Subject = 'Test Email';
$mail->Body    = 'This is a test email.';

#For a Node.js application using Nodemailer, your configuration might look like this:

#javascript

const nodemailer = require('nodemailer');

let transporter = nodemailer.createTransport({
    host: 'localhost',
    port: 1025,
    secure: false, // True for 465, false for other ports
    auth: {
        user: '',
        pass: ''
    }
});

let mailOptions = {
    from: '"Mailer" <from@example.com>',
    to: 'recipient@example.com',
    subject: 'Test Email',
    text: 'This is a test email.'
};

transporter.sendMail(mailOptions, (error, info) => {
    if (error) {
        return console.log(error);
    }
    console.log('Message sent: %s', info.messageId);
});


5. Sending Test Emails

After configuring your application, you can send test emails. These emails will be captured by MailHog and displayed in the web interface at http://localhost:8025 or at http://server-ip:forwarded-port



Additional Tips

    Persistence: If you need to retain email data between restarts, you can add a persistent volume to the MailHog deployment.

    Authentication and Security: For production use, consider adding authentication and securing the MailHog web interface, especially if exposing it externally.

Example Deployment with Persistent Volume

Here’s an extended example of the deployment with a persistent volume:


apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mailhog-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mailhog
  labels:
    app: mailhog
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mailhog
  template:
    metadata:
      labels:
        app: mailhog
    spec:
      containers:
      - name: mailhog
        image: mailhog/mailhog:latest
        ports:
        - containerPort: 1025
        - containerPort: 8025
        volumeMounts:
        - mountPath: /data
          name: mailhog-data
      volumes:
      - name: mailhog-data
        persistentVolumeClaim:
          claimName: mailhog-pvc

Apply these configurations with kubectl apply -f <filename>.yaml.

This guide should help you deploy and use MailHog within a Kubernetes cluster effectively.

